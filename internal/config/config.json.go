// Code generated for package config by go-bindata DO NOT EDIT. (@generated)
// sources:
// data/config.json
package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataConfigJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x3b\xfb\x6f\x22\x39\x93\xbf\xaf\xb4\xff\x43\x2d\xab\x11\x33\xfa\x08\x07\xe4\x31\x49\xbe\xbd\x3d\x11\x42\x26\xd1\x64\x12\x2e\x4d\x76\xf6\xf6\xd3\x1d\x63\xba\x0b\xda\x17\x63\xf7\xd9\x6e\x08\x3b\xca\xfd\xed\x27\xdb\xdd\xd0\x4d\xf3\x0a\x73\x8c\xf4\xad\x34\xa3\x40\xd9\x74\x3d\x5d\x0f\x57\xf5\xd7\x1f\x7f\x00\x28\xf5\x46\xa8\x49\xe9\x1c\xec\x37\x80\xd2\x18\xa5\xa2\x82\x97\xce\xa1\x54\xaf\xd6\xaa\xf5\x52\x25\x59\xf0\x43\xc2\x87\x18\xf4\x26\x21\xda\xd5\x46\xad\x71\x74\x50\x3b\x39\x68\x1c\x97\xcc\x8e\x17\xbb\xaf\xa4\x50\x99\x9f\x77\xa7\x11\xaa\xcc\x53\x95\x0a\xe7\xdf\x00\x4a\x7a\x14\x31\x4f\x4b\xca\x87\xe6\x51\x5f\xbf\x56\x3d\xf7\xbb\x3b\x32\xc2\x97\x97\x7f\xfd\xfa\x15\xaa\xb7\x62\x28\x62\x0d\x2f\x2f\x3f\x9b\x6f\x37\xbe\xe0\x77\xf1\xa8\x8f\x32\x85\x78\x73\x4c\xf0\xf2\xf2\xc6\x80\x1e\x70\x24\x34\x5e\x0b\xa5\x53\x48\x47\xc8\xd9\xe7\x47\x85\x92\x93\xd1\x6c\x77\x7b\x14\xe9\x69\xfa\xe5\xf7\x7a\xfd\x4a\xc8\x09\x91\x01\xe5\xc3\x14\xd8\x12\xa3\x48\x3a\x34\xb3\x1f\x3d\xa3\x1f\x6b\x6c\x89\xd1\x88\xf0\x20\x85\x7a\xde\xf5\x87\xcf\x06\xef\x2d\x9d\xe3\xb6\x40\x43\x40\x01\x68\x28\xc9\x02\x2f\xc5\x9d\xd0\xed\x67\xaa\x9b\x03\x8d\xf2\x56\x0c\x29\x5f\x40\x70\x29\xb8\xf6\x22\xf4\xe9\x60\xba\xc8\x86\x63\xba\xcd\xc7\x54\x0a\x3e\x42\x3e\xe7\x5d\xd2\x31\xd1\xf8\x11\xa7\x1d\xa2\xc3\x3c\x55\xb3\xa5\x05\xda\x2e\xa4\x98\x28\x94\x59\xa1\x5e\x09\xc6\xc4\xc4\xf3\xae\xb3\x4f\xf9\x03\xa5\x98\xe3\x11\xcf\xd3\xec\x2f\x2c\x20\xa7\x05\x03\xc8\xaa\xc2\x02\x2c\x9f\x29\xa4\x19\x90\x48\xdf\x0a\x9f\x30\x54\x33\xcc\x94\x61\x42\x90\xd7\xea\xdc\x8f\x51\x7a\x57\xdd\xce\x92\xd5\x8e\x14\x5a\xf8\x82\xa5\x4b\xf6\x39\x16\x47\x51\x4f\xe9\xde\xdf\x9c\x9d\xa7\x2b\x1f\x71\xda\x7e\x76\x26\xde\x64\x43\x31\xa3\xc1\xb0\xf1\x11\x2d\x7b\x33\x58\x8b\x46\x21\xca\xd9\xd7\x4b\xaa\x7c\xc1\x39\xfa\xfa\x66\xd0\x8c\x75\xe8\xc5\xbe\x8f\x18\xa8\xae\xa4\x63\x4a\x18\x9b\xce\xb9\xc6\x01\xca\xe4\x89\x06\x8b\xa4\x3a\x1c\xcd\x9e\xd3\xd4\x1a\x47\x91\x36\x8f\x78\x54\x94\x0f\x3d\xef\xba\x39\xcc\xe8\xb3\x69\xf4\x60\x21\x39\x4b\xb5\x87\xa1\x8b\x72\x44\x39\x61\x57\x62\xbe\xdf\x7c\xf6\xe8\x9f\x33\xb5\x64\xf7\x5c\x08\x16\x2c\x3d\x07\xcd\x28\x42\x1e\x7c\xa6\x3c\x10\x13\x95\xd5\x78\xfa\xeb\x56\x48\xa4\xc2\x0c\x12\x89\x43\x29\xe2\xb9\x8c\x2f\x88\xff\x94\x87\xb4\x62\xa9\x84\x6c\x09\x26\x64\x1e\x94\x35\x1a\xf3\x33\x15\x11\x1f\x3d\xe4\x81\x6a\x69\xc9\xae\xe7\xea\x1c\xde\xc7\x3a\x8a\x75\x06\x70\x25\x58\x80\x72\x19\x81\xd9\x87\xde\x0a\xff\x69\x06\xa7\x9a\x2d\x3f\xfb\x96\x32\xcf\x0f\x71\x54\x90\xd5\x83\x98\xa8\x82\x04\x04\x8b\x47\x5c\x65\x24\xe0\xe3\x15\x7d\xc6\xc0\x6c\x6e\x09\x36\x5b\xf1\xa6\x5c\x93\xe7\x6b\x3a\x0c\x19\x1d\x86\x3a\xe3\x58\xbc\x50\x4c\x8c\x0a\x8c\x2a\x9a\xea\x42\x9a\x65\xcc\x08\x47\x69\x31\xfa\x44\x7c\x29\xb2\xcc\x64\xc1\xf8\x3c\x3f\x4b\x44\x69\xbc\x44\x46\xa6\x59\xc5\x17\xd4\xc4\x75\x93\x6b\x4a\x18\x25\x2a\x43\x88\x81\xdf\xd2\x21\xd1\xb1\xb4\xf6\xed\x3c\xab\x26\x52\x27\xee\xf5\x86\xa7\x50\x73\x94\x90\xeb\xd9\x2e\x47\x4e\x97\xf4\x53\xc5\xa6\x91\x02\xa0\x44\x8c\xa9\x62\xd0\x13\x91\xa6\x82\x9b\x40\xf0\x8f\xff\x74\x8b\x2f\x99\x58\x31\x5f\x4d\xc3\x84\xf3\xf9\xb9\x48\x11\xe0\x80\xc4\x4c\xf7\xc6\x84\xc5\x68\x82\x85\x96\x31\x66\x50\x29\xf4\x75\x12\xaf\x2e\x84\x78\x1a\x11\xf9\x04\x0a\xb5\x91\xb6\xca\x6c\x0b\x91\x45\x66\xcf\x25\x6a\xab\x46\x54\x30\x09\x51\x87\x28\x41\x0b\x08\xa8\x8a\x8c\x00\x09\x48\x4c\xce\xb2\xf1\x0d\x23\x54\x8a\x0c\xd1\xec\xe4\xc0\xc4\x70\x68\x24\x27\x62\x5d\xcd\x3c\xb8\xc0\x84\x85\x0e\x08\x53\x96\xda\xbf\x83\xf9\xa1\x61\xaa\x92\x59\xb6\x3c\x9c\x43\x09\x4a\x29\xf0\x25\x11\x4f\x1a\x6d\xe7\xf1\x6e\xbd\x34\xea\xb5\xb3\xe5\xc2\xf8\x80\x1c\x25\x61\x4b\x44\xd0\x0d\x11\xa8\x2f\x38\x70\x17\x4f\xc5\x00\x74\x88\x90\x44\xee\x2a\x98\xf5\x04\x0f\x0c\x84\x04\xcf\xbb\x06\xaa\xa0\x5e\x3b\xab\x96\x16\xa8\xcc\xc4\xe0\xf5\x64\xd6\x5e\x4b\xe4\x0d\x0f\xa8\x4f\x34\xaa\x2c\x6d\xa0\xa7\x11\x56\xe1\x2a\x21\x6a\xae\x29\x55\x01\xaa\xcb\x0a\x08\x9b\x90\xa9\x82\x72\xad\xbc\x59\x45\x2e\x25\x29\xd5\x56\xaa\x60\x9e\x4d\xac\xe7\x2d\x83\x49\xe2\xff\xc4\x54\x62\x50\x3a\x07\xa3\xe2\xe5\x56\x4a\x14\xf5\x2d\xfd\x6b\xcc\xd4\xe8\x20\x14\x4a\xdb\x40\x2f\x24\xdc\x74\x80\x04\x81\xc9\x45\x52\x75\x49\x4b\x5d\xf2\x1c\x39\x46\x69\x14\x47\x15\x0c\x28\xb2\x00\x7c\xc2\xb9\xd0\xd0\x47\x30\x21\x65\x5a\x50\x9c\x09\xc6\xeb\xb9\x6a\x34\x56\x1c\xb2\x6d\xc9\x8f\x4c\xbc\x4f\x4c\xcc\x98\x91\x21\x3a\xaf\xb5\xbc\xa9\x99\x35\xfb\x1b\xaa\xa0\xd1\x28\x50\x9c\xa6\x3d\x5b\xeb\x62\x17\x9a\xe3\x34\xb7\x5a\x41\xf0\x22\x51\xb9\xac\x71\x57\xb7\xd5\x0c\xc6\x84\xfb\x18\x6c\x22\xb0\xcd\x49\x9f\x21\xfc\x5e\xaf\x1b\xf2\x12\xa4\x9b\xed\x3c\xf5\x35\x07\xf5\x9c\x0b\x9a\x79\xa8\xd5\x07\x20\x93\xfe\x7e\x27\xde\xfc\x39\xc6\x7d\x32\x96\x4f\xe2\x77\xb1\xa8\x6d\xf9\x4a\xf3\x4f\x2d\x00\x1d\x52\x88\x23\x61\x83\x09\xe5\x55\x28\xff\xbd\x0c\x94\x5b\x4b\xd3\x26\xa4\xbb\xc3\x4b\x15\x48\x8c\x18\x31\xcf\x9f\x50\x1d\x42\xb9\xd7\xeb\x74\x7f\xbb\x79\xf8\xd0\xeb\xcd\xf6\x27\x48\x8b\x2e\x39\x5b\x8a\xec\xc2\xda\x1d\xea\x89\x58\x1f\x44\x6d\xd1\x20\x06\x96\xf9\x21\xd1\x38\x21\x53\xeb\xad\x54\x15\x3e\xc5\x4c\xd3\x88\xcd\xbd\x97\x02\x22\x0d\xb5\x11\x91\x44\x63\x00\xfd\xa9\x65\xe7\xa6\xd3\xee\xf5\xca\xcb\xa9\x4f\x6b\xa6\xef\x48\xbd\x71\x3c\x59\xea\xed\xf7\xd7\x53\x9e\x16\x76\xdf\x91\xf2\xd4\x65\x65\xa9\x9f\xc1\x5e\xc5\xc1\xea\x2a\x74\x3d\x3b\xee\xc0\x7d\xd3\x31\x59\x9e\x95\xe1\x33\xd5\x40\x0c\x31\xd6\xe2\xed\x99\x31\x2e\xc2\x9e\x28\x53\x25\xec\xd3\x47\x2c\xa9\xb8\x77\x16\xc3\x36\x69\x4e\x86\x6f\xe5\xd0\x02\x99\x29\xb2\x0a\xe5\x83\x7a\xd9\xca\xc4\x3a\xca\x8a\x49\x71\x80\x0e\x80\x24\x9b\xa9\x3f\x8f\x5d\x54\x99\xcf\xc1\x3e\x85\x53\xb8\x73\x58\x2f\x9a\x1b\xae\x51\x12\x5f\xd3\x31\x82\x17\x22\x63\xdf\x66\x2d\x4e\x2d\x34\xc9\x0d\x93\x44\x08\xe7\xc4\x54\xe1\xed\x9d\xd0\x30\x45\xe3\x50\x39\x55\x21\x06\xef\x36\x0a\xa3\x48\x63\x3e\x6d\x35\xd5\xc9\xef\x97\x6d\x9b\x73\xaf\x94\x4b\xfe\xca\x65\x9f\x81\xc5\x56\xbe\x5a\x58\x09\x44\x0e\x2b\x3c\xe1\x14\x06\x94\xe1\x0a\xaf\x9a\xbb\xf3\xd9\xb3\x87\xca\x90\xa4\x66\x45\x44\xe2\xb2\xb2\x9e\xca\xae\xbf\xd2\xcd\x66\xee\xa8\xbe\x53\x5a\x62\x76\x5d\x51\x86\x07\x7d\x87\x7a\x9f\x47\x2b\x77\xdd\xb6\x77\xc7\xeb\xb0\xb9\xdc\xdb\x58\x54\x92\x5c\x18\x2b\x82\xef\xc0\xec\xec\xea\x70\x3d\xa3\x77\x82\xaf\xe0\x73\x0b\x93\xb4\x57\x28\xd6\x24\xc5\xf3\x74\x33\x33\x16\x57\xe1\xe8\x7b\xc2\x7f\x52\x47\xee\xf0\x17\xe0\xc7\xb6\x5e\xca\xc1\xaf\xb5\xb6\xc8\x0f\x73\xd0\x2e\x32\x8e\xe6\xe8\x95\x8e\xf2\x8e\x45\xf8\xc4\xfa\x9b\xe3\xf5\x92\x7a\x55\x2d\xfa\x3a\x29\x5d\xaf\x2d\x36\xad\xec\xd2\x3a\xb3\x50\x4b\xa6\xb7\xbb\x9b\x6e\x2a\x4e\x57\xdc\x02\x6c\x41\x5e\x27\x53\x4c\x6e\x4d\x93\x4d\x61\xf6\xe5\xe8\x6c\x32\x52\xa8\x17\xd7\x12\x95\xbd\xe3\xde\xf9\x64\xb7\x9f\x23\x94\x7a\x63\x88\x44\x1e\x00\x33\xa8\x80\x11\x3e\x8c\xc9\x70\x56\x31\xa8\x34\x6c\xa4\x54\xee\xd1\x97\x2d\xbd\xc0\x5f\xcf\xba\xe7\x5d\xff\xcb\xea\xf3\xbe\xad\x5f\x7b\x54\x08\x5e\xab\x03\x62\x8c\x12\x6c\xd7\xc0\x68\x68\xee\xd6\x4c\xe5\xe4\x72\x2a\x1b\x9c\x5a\x1d\x97\x51\xa5\x91\x4a\x48\x30\x34\x54\x01\x7e\xee\xde\x5f\xde\x9f\x43\xab\x79\xdb\xda\x28\x28\xaf\xd5\x59\x22\xa7\x19\x43\xdb\x8a\x2a\xed\x50\xec\xdd\xf9\xcf\xda\x26\x45\xd9\x6c\x7f\xc1\xb9\xe0\x27\x9d\x7e\x17\xbd\x64\xab\x03\x5e\x84\xf6\x5e\x6c\xc1\x51\x9a\xa5\x3b\x21\x47\xce\xff\x1d\xae\x94\x4f\xa1\xa5\xb3\xa7\x73\x9d\x16\xec\x46\x24\xee\xfc\xb8\xb8\x01\x0f\xe8\x8b\x21\xa7\x7f\xa2\x02\x6a\x52\x45\x4e\x18\x8c\x89\xa4\x26\x41\x50\xf0\xc6\x94\xbb\x15\x78\x63\xea\xc6\x0a\xbc\x31\x7e\xc1\x7c\x23\x4a\x55\xa1\xfc\xa6\x0c\x2a\x14\x31\x0b\xa0\x8f\x4b\x2a\xfb\xf6\x43\xab\x7d\xd7\x35\xc9\x0e\x18\xb3\x7d\xf3\x06\xde\x66\xa0\x99\x8f\xef\xcc\xc9\x8d\xcd\x96\x65\x69\xd1\x42\x63\x6b\xbd\x7c\x9a\xb1\x16\xdf\xe4\x5f\x4c\xc2\x90\x9a\x4f\xd2\x32\xde\x6c\x34\x16\x6b\xd1\x66\xbc\xeb\x71\x63\x89\xd1\x78\xd7\xe3\xba\x33\x98\x55\x46\xb1\xd8\xb4\xdb\xc5\x26\xb6\xe3\xf7\x23\x4e\x01\x13\x54\x40\x66\xad\xbb\x2a\x5c\x3a\x2c\xe7\x80\x7e\x10\x56\x82\xf0\x60\x88\xcf\x07\x2a\x24\x75\xfb\x59\x8a\x38\xaa\x1f\xb9\xef\x52\x91\xca\xe7\xe6\xc3\xdd\x7c\xc1\xc2\x0b\xaa\xcc\x76\x1c\xf7\xc7\x90\x6d\xcf\x9a\x82\x41\x1b\x3c\x59\x3e\x82\xa3\xa3\xd3\x0a\x06\x8d\xe3\xe3\xfa\x59\x05\xfd\x40\x91\x0c\xe9\x8a\x14\xe8\x4d\xba\xa1\xfb\x23\x35\x41\x90\xa1\x91\xa0\xaa\xf8\x21\xf1\x43\xd2\xa8\x55\x0e\x03\x54\x09\x75\xa8\x2a\x7d\x26\x26\x03\xaa\xc2\x0a\x91\xfe\x40\xc4\xc5\x20\xbc\xb1\x5b\xbb\xe7\xc8\x3c\xc7\x6f\xeb\xf7\x58\x87\xc8\x35\xf5\x89\x6d\x38\xa9\x84\x18\xeb\x1c\x44\xac\xc1\x78\x90\x89\x90\x81\x89\x48\x5a\x3c\xe1\x5e\xaf\x45\x57\xf4\xa7\x77\x2d\xb2\xb6\x93\x47\x33\xf8\xef\x58\xe9\x24\x79\x32\xf8\x91\xfb\x26\x0b\x0d\x50\x82\x32\x89\x0a\xd1\xf0\xc4\xc5\x84\xdb\x1b\xc5\xa4\xa0\x94\x62\x04\x3a\xa4\x2a\xc9\x61\x6c\x05\x39\x12\x63\x0c\xd2\xdc\x46\x8b\x28\xcd\x13\x99\xa9\x76\xf7\x27\xb4\x55\x5d\xfb\xfd\x4a\xed\x26\x0d\x41\xc4\x4e\x08\x08\x09\xf8\x9c\x40\x3a\x71\xb7\xfb\x1f\x0e\x5e\x31\x8f\x30\x35\xdd\x90\x89\x3e\x61\xcb\x1e\xf8\xff\x2e\x8e\x25\x43\x0a\x7b\x3e\x51\xf7\x11\xf2\xb4\x23\x82\x41\xb6\x2b\x08\x7d\xe2\x3f\x19\x93\x98\x8a\x38\x0d\xe7\x56\x30\x7b\x14\x40\x76\xca\x62\x3d\xe3\x9f\x44\x9f\xd8\x5d\x4b\x79\x4f\x9f\xb3\xf6\xec\xf0\x29\x50\xae\x34\x61\x0c\x4d\xca\xc2\x35\xfc\xcd\xda\x7c\x3f\xa6\x4c\x53\x0e\xe5\x14\x47\x79\xd1\x0d\xa6\xc3\x21\x9b\x6a\xb6\xdd\x89\xb3\xa3\x28\x76\xfe\xc4\x65\x2d\x8b\x14\x2c\x8e\xa3\xec\x6c\x25\xdb\x10\xe3\xae\x4d\x03\x9b\xf2\x57\x20\xa0\x2a\xf9\x5a\x2b\xef\xf3\x2c\x2c\xce\xd2\xec\xea\x13\xb6\xb2\x05\x8b\x0c\x12\x6c\xd0\x69\x76\xaf\xed\x5d\x72\x88\x8c\x01\xf2\xf1\x77\x30\xf9\x64\xe6\x64\x3d\x97\x8f\xdd\xab\x83\xd3\xdd\xd9\xbc\x13\x1a\x08\x63\x90\xf0\x60\x3d\x7f\x24\x94\xa2\x7d\x86\x30\xc5\xcd\x27\xdb\xe1\x37\xb6\x7d\x9c\xe3\xf3\xc6\xbb\x3f\x38\x3d\x3d\x3e\x3b\xa8\x17\x33\xd4\xf9\x9a\xbd\xea\xa9\xe7\x6f\x75\x5a\x9d\xd3\xe3\x5a\x69\xa1\x65\x9e\x1c\x31\x40\xee\x8b\xc4\x07\x96\x8e\xd6\xdd\xfa\xa5\x63\x54\x1b\xba\xf2\x87\x27\x95\xe4\xff\xee\x32\x2c\x3f\x54\x3e\x54\x2e\xca\xf0\xc9\x04\xde\x3e\xba\x96\xca\xc1\xec\x06\x76\xf1\xa0\xce\x07\xba\xd6\xd3\x76\x58\xab\xd8\x7f\xdf\x8d\xb0\xcc\x5c\xd9\x06\x37\x76\x5a\xab\xd8\xff\x67\x2b\x86\x1a\xf6\x46\xdc\xe6\xbb\xcd\x0b\x26\xfc\xa7\xdd\xa9\xf2\x45\x2c\x15\x4a\xf0\xf4\x94\xe1\x46\xe3\x77\xc8\x0a\xf6\xfd\xc8\x03\x94\x8c\xba\x3b\x8a\xfc\xf1\xbf\x4d\xa0\x79\xd3\xbe\x60\x94\x3f\x51\x3e\x84\x7e\xfa\xc0\xc3\xe5\xeb\x71\xf6\xc9\x47\xcb\xf7\xa4\xcb\xab\x2f\x3f\x97\xcc\x06\xee\xd3\x95\xce\xd0\x81\x32\xf8\xe0\xbf\xae\xe1\x2d\x1d\xcc\xa3\x46\x02\xfd\x37\x1b\x7b\x91\x6c\xd1\x5c\xda\xdd\xb7\xce\x66\x1f\xff\x7a\xe1\x31\x37\xc5\xb9\x4b\xf9\xb8\x0d\x67\x5f\x7e\xf9\xf5\xcb\xec\x76\xd6\x8d\x60\xd8\x96\x8e\xed\x76\xbc\xc5\xe7\x73\xdb\xea\xb7\x20\x12\x45\xef\x2a\x6e\x41\xe8\x10\xe5\x84\x2a\x84\xb7\xe5\x56\x19\x02\x49\xc7\xb3\x9b\x1b\x3b\x62\x4d\x14\xc4\x2a\x26\xec\xdd\xaa\xac\x66\xf3\xc1\x37\xf9\xfa\x68\x77\xc6\x6c\xa7\x8d\x72\x18\x37\x1a\xd5\xc3\x73\xb0\x4f\xab\xb8\x3f\x07\xf2\xa4\x02\x63\x5d\xaf\xd5\x92\x3f\x7f\x33\x7f\x1b\x0d\xfb\xf5\xc8\x41\xcf\xcc\x1f\x93\x39\xff\xf6\xc9\x9b\x7d\x68\x54\xe0\x0e\xb5\x79\x84\xfd\x6d\xf2\xd9\xfe\xd0\x0b\xe9\x40\x5f\xf1\x8f\x38\x55\x15\x68\x7b\xad\x7f\xf0\xff\xad\x80\xd7\xba\xaf\xc0\xc5\x54\xf4\xe3\x14\x73\xe3\xf8\xc4\xb7\xfe\xb8\xa0\xeb\x85\x41\xdc\x7d\x9e\x5f\x3b\x7d\x9a\x0c\x0e\xda\xf4\x47\x0b\x48\xae\x6e\x6c\x6d\x48\xfa\xa0\x2d\x0d\xfb\xb3\xed\xcc\x48\xf1\x7a\x4e\x7b\x9e\x0e\x7a\x76\xb7\xea\xd5\x7a\xdf\x90\x17\xdd\x77\xc1\x7b\xec\x74\xee\x1f\xba\xed\xcb\x73\xf8\xe9\xa7\x9f\x7e\x4a\xef\x4b\x80\xba\x16\x6c\xb9\x15\x4b\x69\x8c\x37\xa9\x06\xad\xa2\x8c\x44\x46\x58\x86\xb7\x8a\x0c\x50\x82\x1f\x0a\xea\xe3\xbb\x2a\x98\xd2\xc2\x9e\x82\x04\x94\x08\xd0\x49\x75\xde\x88\xb1\x03\x4b\x0a\xfa\x53\xd0\xb1\xe4\xc6\x9b\x53\x1e\xe0\x33\xd4\x4f\x80\x72\x2d\xcc\x5f\x8b\x46\x01\x61\x4a\x2c\x74\x79\xdf\x14\xdb\xbb\xd9\xb9\xeb\xf5\x82\x5b\xd5\x4c\xda\x46\x58\x0f\x6e\x4c\x53\xc1\x92\xd9\x6d\x2d\x4c\x70\xb7\x9a\x5f\x95\xe6\xba\xf9\xef\x0d\x89\xda\xd1\xf7\x26\xaf\xb8\xf9\xaf\x17\x32\x8a\x13\xf5\x1b\x9a\x49\x9a\xf0\x80\xc8\x00\x9e\x70\x3a\x11\x32\x50\xbb\xf3\xeb\xa1\x06\x87\x1e\xb2\xf8\x77\x6e\x28\x17\x28\x2b\xa4\x5e\x8f\x9c\x3e\x27\x0e\x4c\xf9\x92\x46\x1a\x8a\x89\x58\x8b\x2a\x5f\x14\xf3\xaf\x0e\x4a\x56\xcc\xb8\xbc\x7f\xbf\x75\x79\x56\xee\x09\x76\x8c\x1f\xea\xae\xdc\xaf\x2f\x5b\x73\x97\xf3\xb5\xc6\xb2\xb5\x43\xb7\x76\xb8\x6c\xcd\xf5\xcb\x6b\x47\xcb\xd6\x5c\x21\x55\x5b\x4a\xcb\x89\x5b\x3b\x59\xb6\xf6\xde\xad\xbd\x5f\xb6\xe6\xca\xba\xda\xe9\x6a\xf3\x59\xfa\xda\xc5\x3e\x43\x91\xc1\x08\xf6\x65\x1b\x5b\x0d\x36\x15\xcc\xb0\xee\x31\xf8\xe4\xdf\x1f\x59\xcf\xdf\x2f\x5c\x70\xfc\xf5\x5b\x12\x2c\xfb\x80\x2f\x20\x24\x7c\xf9\xc5\x77\x9a\x18\x19\xdc\xbf\x7e\x29\xd6\x44\xb9\x37\x58\xf6\x95\xf3\x21\xf1\x43\x37\x4f\xab\x34\x91\x5a\x25\xad\xb6\x7a\xe3\xbc\x71\x5e\x3b\x2f\x43\x3a\x3e\x98\xc0\xbf\xa4\xd3\x46\x5f\xca\xf0\xd6\x77\x31\x92\x4d\xa1\x1f\x0f\x87\xd3\x8a\x89\x77\x53\x18\xa2\x06\x5f\x70\x9f\x68\xe4\x36\x7c\xa5\x89\x57\x21\xff\x9b\xbf\x8d\xb3\x6b\x03\x6e\x3b\x67\xc4\x06\x80\xcf\x11\x23\x94\x63\xb0\x63\xdf\x8d\x8b\x65\x05\x5f\xbd\x66\x6f\xfc\x17\xfc\x4c\x23\x81\xe6\xcf\xf9\x61\x02\xcd\x9f\xf0\xa3\x04\x9a\x3f\xdb\xc7\x09\x34\x7f\xaa\x4f\x12\x68\xfe\x3c\xbf\x4f\xa0\xa7\x39\xe8\x69\x02\x3d\xcb\x41\xcf\x12\x68\xbd\xb6\xc0\x46\x0a\xaf\x2f\x30\x92\xc2\xf3\x0c\x1e\xa6\x94\xd4\x57\xf7\xa0\x33\xef\x55\xad\x57\xee\x65\xfb\xaa\xf9\x78\xdb\xdd\x5d\xbf\x9b\x35\x7a\xe7\xdd\x14\x35\x9a\xe2\x2d\x28\xb5\xf9\xd0\xbc\xb8\x69\x59\xf8\xfb\xd3\x72\x6e\xe9\xc3\x43\xbb\xfd\xd1\xae\x9c\xd4\xf3\x2b\xdd\xc7\x87\x8f\x37\xde\xb5\x5b\x6b\xe4\xd7\x7e\xbb\x69\x77\xef\x9a\x9f\xda\x9e\x1b\x88\x3c\x39\xcc\x2f\xb7\x9b\x5e\xb7\xfd\xf8\x70\xdf\x69\xbb\x4b\xab\x05\x9c\x0f\x8f\x9e\x77\xd3\xbc\xb3\x6b\xb5\xa3\xfc\xda\x45\xf3\xb6\x9b\x90\x7a\x7a\xb2\x56\x15\xd9\xf7\xd9\xf6\xe9\xc3\xf7\xe8\xa9\x73\xaf\xdf\xfd\x93\xf2\x90\x7f\x5b\x70\xd3\x20\x9f\x9d\xf4\xd8\x1f\x1b\xf3\x51\x92\x85\x93\x81\x9a\xf8\xa1\x1b\x40\xc9\x73\xf8\x89\x3c\xd3\x11\xfd\x13\x03\x08\x32\x7b\x16\x6e\x72\x63\xc6\x94\x2f\xd1\xbd\xf8\xbe\xda\x41\xa4\xaf\x48\xee\x2b\xb0\xdd\x09\x3b\x4c\x42\x4d\x35\x65\x5f\xb0\x4c\xe7\x35\x7d\x87\xb8\x0a\x9f\x25\xd5\x08\x04\xca\x3f\x97\x81\x28\x28\xf7\x7a\x97\x37\xed\x3f\xda\xbd\x5e\xa1\x01\x94\x7f\x7d\x73\x3d\xc5\x59\xa3\x78\xed\x0b\x97\xee\x15\x2f\x9f\x8e\xec\xbc\x0c\x8b\x31\xed\xcb\x3e\x7c\xb8\x48\x4a\xd0\xb7\xe5\xe3\xc3\x93\xd3\xf7\xb5\xb3\x7a\x32\x8f\xa5\x33\xaf\x85\x25\x5b\x26\x21\xd5\x54\x85\xef\xe6\x73\x5a\x7d\x46\xfc\xa7\x0a\x94\x1b\xc7\xc7\x0e\x10\xc5\x12\x41\x62\x50\x81\xf2\xc9\x71\xe3\xb4\x96\x81\x0e\x8d\xee\x2a\x50\xae\x9f\xbc\xaf\xd7\x4f\x72\x4b\x7d\x16\x63\x21\x8a\xdb\xd7\x83\x77\xd1\x62\xda\x97\x5d\x2a\x08\xaa\x12\x09\xd0\xd9\x9b\x8a\xf6\xed\xbc\x45\xec\x7f\xa0\x14\xa5\xf3\xd7\xbf\x4d\xf9\x5a\xe4\xa6\x56\x4b\x50\x9b\x3f\x2f\x3f\xfe\xf0\xf2\xe3\x0f\xff\x17\x00\x00\xff\xff\x5a\xcf\xba\x85\x16\x42\x00\x00")

func dataConfigJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataConfigJson,
		"data/config.json",
	)
}

func dataConfigJson() (*asset, error) {
	bytes, err := dataConfigJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/config.json", size: 16918, mode: os.FileMode(438), modTime: time.Unix(1721242576, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/config.json": dataConfigJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"config.json": &bintree{dataConfigJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
