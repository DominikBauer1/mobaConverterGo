// Code generated for package config by go-bindata DO NOT EDIT. (@generated)
// sources:
// data/config.json
package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataConfigJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x3b\xfb\x6f\x22\x39\x93\xbf\xaf\xb4\xff\x43\x2d\xab\x11\x33\xfa\x08\x07\xe4\x31\x49\xbe\xbd\x3d\x11\x42\x26\xd1\x64\x12\x2e\x4d\x76\xf7\xee\xd3\x1d\x63\xba\x0b\xda\x17\x63\xf7\xd9\x6e\x1e\x3b\xca\xfd\xed\x27\xdb\xdd\xd0\x4d\xf3\x1a\xe6\x18\xe9\x56\x4a\x04\x5d\x36\xae\x87\xcb\xf5\x70\x55\x7f\xf9\xf1\x07\x80\x52\x6f\x84\x9a\x94\x2e\xc1\x3e\x01\x94\xc6\x28\x15\x15\xbc\x74\x09\xa5\x7a\xb5\x56\xad\x95\x2a\xc9\x80\x1f\x12\x3e\xc4\xa0\x37\x09\xd1\x8e\x36\x6a\x8d\x93\xa3\xda\xd9\x51\xe3\xb4\x64\x66\xbc\xda\x79\x25\x85\xca\xfc\xbc\x3b\x8b\x50\x65\x56\x55\x2a\x5c\x3c\x01\x94\xf4\x28\x62\x9e\x96\x94\x0f\xcd\x52\x5f\xbe\x54\x3d\xf7\xbb\x07\x32\xc2\xd7\xd7\x7f\xfe\xf2\x05\xaa\xf7\x62\x28\x62\x0d\xaf\xaf\x3f\x9b\xa7\x3b\x5f\xf0\x87\x78\xd4\x47\x99\x42\xbc\x05\x26\x78\x7d\x7d\x63\x40\x4f\x38\x12\x1a\x6f\x85\xd2\x29\xa4\x23\xe4\xfc\xfb\xb3\x42\xc9\xc9\xc8\xce\xb6\x80\x3f\xea\xf5\x1b\x21\x27\x44\x06\x94\x0f\xd3\x59\x2d\x31\x8a\xa4\x5b\x3a\x05\xb5\xa7\xe8\xc7\x1a\x5b\x62\x34\x22\x3c\x48\xa1\x9e\x77\xfb\xe1\x77\x83\xeb\x9e\x2e\xf0\x59\xa0\x41\x5a\x00\x1a\xec\x59\xe0\xb5\x78\x10\xba\x3d\xa5\xba\x39\xd0\x28\xef\xc5\x90\xf2\x25\x04\xd7\x82\x6b\x2f\x42\x9f\x0e\x66\x59\xd2\x17\x8c\xb6\xf9\x98\x4a\xc1\x47\xc8\x17\xfc\x4a\x3a\x26\x1a\x3f\xe2\xac\x43\x74\x98\xa7\x6a\x3e\xb4\x44\xdb\x95\x14\x13\x85\x32\x2b\xc8\x1b\xc1\x98\x98\x78\xde\x6d\xba\x4a\x2d\x59\x5d\x4c\x67\xd9\x79\x16\x90\x93\xb7\x01\x64\x85\x6e\x01\x96\xbb\x14\xd2\x0c\x48\xa4\xef\x85\x4f\x18\xaa\x39\x3e\xca\x30\x21\xc3\x6b\x75\x1e\xc7\x28\xbd\x9b\x6e\x67\xc5\x68\x47\x0a\x2d\x7c\xc1\xd2\x21\xbb\x8e\xc5\x51\xdc\x9d\x74\xee\x6f\x4e\xa3\xd3\x91\x8f\x38\x6b\x4f\x9d\x32\x37\xd9\x50\xcc\x69\x30\x6c\x7c\x44\xcb\xde\x1c\xd6\xa2\x51\x88\x72\xfe\x78\x4d\x95\x2f\x38\x47\x5f\xdf\x0d\x9a\xb1\x0e\xbd\xd8\xf7\x11\x03\xd5\x95\x74\x4c\x09\x63\xb3\x05\xd7\x38\x40\x99\xac\x68\xb0\x48\xaa\xc3\xd1\x7c\x9d\xa6\xd6\x38\x8a\xb4\x59\xe2\x59\x51\x3e\xf4\xbc\xdb\xe6\x30\xb3\x8b\x4d\x23\x7d\x0b\xc9\xe9\xa7\x55\xfb\x2e\xca\x11\xe5\x84\xdd\x88\xc5\x7c\xf3\xdd\xa3\x7f\xce\xb7\x25\x3b\xe7\x4a\xb0\x60\xae\xf1\xcd\x28\x42\x1e\xfc\x4e\x79\x20\x26\x2a\xab\x21\xe9\x2f\x5a\x21\x91\x0a\x33\x0b\x4b\x1c\x4a\x11\x2f\xe4\x7a\x45\xfc\x97\x3c\xa4\x15\x4b\x25\x64\x4b\x30\x21\xf3\xa0\xac\xa2\x98\x9f\xa9\x88\xf8\xe8\x21\x0f\x54\x4b\x4b\x76\xbb\xd8\xc2\xe1\x63\xac\xa3\x58\x67\x00\x37\x82\x05\x28\x57\x11\x98\x5d\xf4\x5e\xf8\x2f\x73\x38\xd5\x6c\x71\xb2\x2d\x35\x9e\x1f\xe2\xa8\x20\x93\x27\x31\x51\x05\xae\x05\x8b\x47\x5c\x65\xb8\xf6\xf1\x86\x4e\x31\x30\x93\x5b\x82\xcd\x47\xbc\x19\xd7\x64\x7a\x4b\x87\x21\xa3\xc3\x50\x67\xcc\x86\x17\x8a\x89\x11\xb5\x11\x79\x53\x5d\x49\x33\x8c\x19\x81\x28\x2d\x46\x9f\x88\x2f\x45\x96\x81\x2c\x18\xa7\x8b\x33\x43\x94\xc6\x6b\x64\x64\x96\xdd\xe0\xc2\xd6\x70\xdd\xe4\x9a\x12\x46\x89\xca\x10\x62\xe0\xf7\x74\x48\x74\x2c\xad\x1e\x3b\x5b\xa9\x89\xd4\x89\xc1\xbc\xe3\x29\xd4\x1c\x19\xe4\x7a\x3e\xcb\x91\xd3\x25\xfd\x74\x33\x53\xdb\x0f\x50\x22\x46\x25\x31\xe8\x89\x48\x53\xc1\x8d\x69\xff\xc7\x7f\xb8\xc1\xd7\x8c\xf5\x5f\x8c\xa6\x86\xdf\x59\xf1\x9c\xed\x0f\x70\x40\x62\xa6\x7b\x63\xc2\x62\x34\xe6\x5f\xcb\x18\x33\xa8\x14\xfa\x3a\xf1\x40\x57\x42\xbc\x8c\x88\x7c\x01\x85\xda\x48\x5b\x65\xa6\x85\xc8\x22\x33\xe7\x1a\xb5\xdd\x46\x54\x30\x09\x51\x87\x28\x41\x0b\x08\xa8\x8a\x8c\x00\x09\x48\x4c\xce\xac\xb1\x01\x23\x54\x8a\x0c\xd1\xcc\xe4\xc0\xc4\x70\x68\x24\x27\x62\x5d\xcd\x2c\x5c\x60\xc2\x42\x07\x84\x29\x4b\xed\xdf\xc1\xfc\xd0\x30\x55\xc9\x0c\x5b\x1e\x2e\xa1\x04\xa5\x14\xf8\x9a\x88\x27\xf5\x9f\x0b\x0f\xb6\x59\x1a\xf5\xda\xc5\x6a\x61\x7c\x40\x8e\x92\xb0\x15\x22\xe8\x86\x08\xd4\x17\x1c\xb8\xf3\x90\x62\x00\x3a\x44\x48\x7c\x71\x15\xcc\x78\x82\x07\x06\x42\x82\xe7\xdd\x02\x55\x50\xaf\x5d\x54\x4b\x4b\x54\x66\xbc\xea\x66\x32\x6b\x5f\x4b\xe4\x1d\x0f\xa8\x4f\x34\xaa\x2c\x6d\xa0\x67\x11\x56\xe1\x26\x21\x6a\xb1\x53\xaa\x02\x54\x97\x15\x10\x36\x21\x33\x05\xe5\x5a\x79\xfb\x16\xb9\x20\xa3\x54\x5b\xbb\x05\x8b\xf8\x60\x33\x6f\x19\x4c\x12\xff\x3b\xa6\x12\x83\xd2\x25\x98\x2d\x5e\xad\xa5\x44\x51\xdf\xd2\xbf\x41\x4d\xcd\x1e\x84\x42\x69\xeb\xc6\x85\x84\xbb\x0e\x90\x20\x30\x91\x46\xba\x5d\xd2\x52\x97\xac\x23\xc7\x28\xcd\xc6\x51\x05\x03\x8a\x2c\x00\x9f\x70\x2e\x34\xf4\x11\x8c\xeb\x98\x15\x36\xce\x38\xdd\xcd\x5c\x35\x1a\x6b\x0e\xd9\xae\xe4\x47\xc6\xaf\x27\x2a\x66\xd4\xc8\x10\x9d\xdf\xb5\xbc\xaa\x99\x31\xfb\x1b\xaa\xa0\xd1\x28\x50\x9c\x06\x35\x3b\xef\xc5\x3e\x34\xc7\x69\xe4\xb4\x86\xe0\x65\xa2\x72\x31\xe1\xbe\x66\xab\x19\x8c\x09\xf7\x31\xd8\x46\x60\x9b\x93\x3e\x43\xf8\xa3\x5e\x37\xe4\x25\x48\xb7\xeb\x79\x6a\x6b\x8e\xea\x39\x13\x34\xb7\x50\xeb\x0f\x40\x26\xb8\xfd\x4e\xbc\xf9\x0b\x8c\x87\x64\x2c\x1f\xa2\xef\xa3\x51\xbb\xf2\x95\xc6\x99\x5a\x00\x3a\xa4\x10\x47\xc2\x3a\x13\xca\xab\x50\xfe\x7b\x19\x28\xb7\x9a\xa6\x8d\x4b\x77\x87\x97\x2a\x90\x18\x31\x62\xd6\x9f\x50\x1d\x42\xb9\xd7\xeb\x74\x7f\xbb\x7b\xfa\xd0\xeb\xcd\xe7\x27\x48\x8b\x26\x39\x9b\x68\xec\xc3\xda\x03\xea\x89\xd8\xec\x44\x6d\x4a\x20\x06\x96\xf9\x21\xd1\x38\x21\x33\x6b\xad\x54\x15\x3e\xc5\x4c\xd3\x88\x2d\xac\x97\x02\x22\x0d\xb5\x11\x91\x44\x63\x00\xfd\x99\x65\xe7\xae\xd3\xee\xf5\xca\xab\xa9\x4f\x33\xa2\xef\x48\xbd\x31\x3c\x59\xea\xed\xf3\xd7\x53\x9e\xa6\x6d\xdf\x91\xf2\xd4\x64\x65\xa9\x9f\xc3\xbe\x8a\x83\xf5\x39\xe6\x66\x76\xdc\x81\xfb\xa6\x63\xb2\x3a\x2a\xc3\x29\xd5\x40\x0c\x31\x56\xe3\xed\x99\x31\x26\xc2\x9e\x28\x93\x19\x1c\xd2\x46\xac\xc8\xa7\xf7\x16\xc3\x2e\x61\x4e\x86\x6f\xe5\xd0\x02\x99\x6f\x64\x15\xca\x47\xf5\xb2\x95\x89\x35\x94\x15\x13\xe2\x00\x1d\x00\x49\x26\x53\x7f\xe1\xbb\xa8\x32\xdf\x83\x43\x0a\xa7\x70\xa3\xb0\x59\x34\x77\x5c\xa3\x24\xbe\xa6\x63\x04\x2f\x44\xc6\xbe\x4d\x5b\xdc\xb6\xd0\x24\x36\x4c\x02\x21\x5c\x10\x53\x85\xb7\x0f\x42\xc3\x0c\x8d\x41\xe5\x54\x85\x18\xbc\xdb\x2a\x8c\x22\x8d\xf9\xb0\xd5\x64\x27\x7f\x5c\xb7\x6d\xcc\xbd\x56\x2e\xf9\x0b\x95\x43\x3a\x16\x9b\xed\x6a\x61\x25\x10\x39\xac\xf0\x82\x33\x18\x50\x86\x6b\xac\x6a\xee\x46\xe7\xc0\x16\x2a\x43\x92\x9a\x27\x11\x89\xc9\xca\x5a\x2a\x3b\xfe\x95\x66\x36\x73\x03\xf5\x9d\xc2\x12\x33\xeb\x86\x32\x3c\xea\x3b\xd4\x87\x3c\x5a\xb9\xcb\xb4\x83\x1b\x5e\x87\xcd\xc5\xde\x46\xa3\x92\xe0\xc2\x68\x11\x7c\x07\x66\xe7\x57\x84\x9b\x19\x7d\x10\x7c\x0d\x9f\x3b\xa8\xa4\xbd\x42\xb1\x2a\x29\xa6\xb3\xed\xcc\x58\x5c\x85\xa3\xef\x09\xff\x45\x9d\xb8\xc3\x5f\x80\x9f\xda\x7c\x29\x07\xbf\xd5\xda\x22\x3f\xce\x41\xbb\xc8\x38\x9a\xa3\x57\x3a\xc9\x1b\x16\xe1\x13\x6b\x6f\x4e\x37\x4b\xea\xab\x72\xd1\xaf\x93\xd2\xed\xc6\x64\xd3\xca\x2e\xcd\x33\x0b\xb9\x64\x7a\x8b\xbb\xed\xa6\xe2\x7c\xcd\x2d\xc0\x0e\xe4\x75\x32\xc9\xe4\xce\x34\xd9\x10\xe6\x50\x86\xce\x06\x23\x85\x7c\x71\x23\x51\xd9\xbb\xec\xbd\x4f\x76\x7b\x1a\xa1\xd4\x5b\x5d\x24\xf2\x00\x98\x41\x05\x8c\xf0\x61\x4c\x86\xf3\x8c\x41\xa5\x6e\x23\xa5\xf2\x80\xb6\x6c\xe5\x45\xfd\x66\xd6\x3d\xef\xf6\x9f\xd6\x9f\xf7\x5d\xed\xda\xb3\x42\xf0\x5a\x1d\x10\x63\x94\x60\xab\x03\x66\x87\x16\x66\xcd\x64\x4e\x2e\xa6\xb2\xce\xa9\xd5\x71\x11\x55\xea\xa9\x84\x04\x43\x43\x15\xe0\xe7\xee\xe3\xf5\xe3\x25\xb4\x9a\xf7\xad\xad\x82\xf2\x5a\x9d\x15\x72\x9a\x33\xb4\xab\xa8\xd2\x4a\xc4\xc1\x8d\xff\xbc\x3c\x52\x94\xcd\xee\x17\x9c\x4b\x76\xd2\xed\xef\xb2\x95\x6c\x75\xc0\x8b\xd0\xde\x8b\x2d\x19\x4a\x33\xf4\x20\xe4\xc8\xd9\xbf\xe3\xb5\xf2\x29\x94\x6e\x0e\x74\xae\xd3\x84\xdd\x88\xc4\x9d\x1f\xe7\x37\xe0\x09\x7d\x31\xe4\xf4\x4f\x54\x40\x4d\xa8\xc8\x09\x83\x31\x91\xd4\x04\x08\x0a\xde\x98\x74\xb7\x02\x6f\x4c\xde\x58\x81\x37\xc6\x2e\x98\x27\xa2\x54\x15\xca\x6f\xca\xa0\x42\x11\xb3\x00\xfa\xb8\x22\xb3\x6f\x3f\xb5\xda\x0f\x5d\x13\xec\x80\x51\xdb\x37\x6f\xe0\x6d\x06\x9a\xf9\xfa\xce\x9c\xdc\xd8\x4c\x59\x15\x16\x2d\x15\xb0\x36\xcb\xa7\x19\x6b\xf1\x4d\xf6\xc5\x04\x0c\xa9\xfa\x24\x45\xe0\xed\x4a\x63\xb1\x16\x75\xc6\xbb\x1d\x37\x56\x28\x8d\x77\x3b\xae\x3b\x85\x59\xa7\x14\xcb\xc5\xb9\x7d\x74\x62\x37\x7e\x3f\xe2\x0c\x30\x41\x05\x64\x5e\xa2\xab\xc2\xb5\xc3\x72\x09\xe8\x07\x61\x25\x08\x8f\x86\x38\x3d\x52\x21\xa9\xdb\xef\x52\xc4\x51\xfd\xc4\x3d\x4b\x45\x2a\xbf\x37\x9f\x1e\x16\x03\x16\x5e\xd8\xca\x6c\x65\xf1\x70\x0c\xd9\x32\xac\x49\x18\xb4\xc1\x93\xe5\x23\x38\x39\x39\xaf\x60\xd0\x38\x3d\xad\x5f\x54\xd0\x0f\x14\xc9\x90\xae\x48\x81\xde\xa4\xea\x79\x38\x52\x13\x04\x19\x1a\x09\xaa\x8a\x1f\x12\x3f\x24\x8d\x5a\xe5\x38\x40\x95\x50\x87\xaa\xd2\x67\x62\x32\xa0\x2a\xac\x10\xe9\x0f\x44\x5c\x74\xc2\x5b\xab\xb2\x07\xf6\xcc\x0b\xfc\x36\x7f\x8f\x75\x88\x5c\x53\x9f\xd8\x82\x93\x4a\x88\xb1\xc6\x41\xc4\x1a\x8c\x05\x99\x08\x19\x18\x8f\xa4\xc5\x0b\x1e\xf4\x5a\x74\x4d\x1d\x7a\xdf\x24\x6b\x37\x79\x34\x83\xff\x8a\x95\x4e\x82\x27\x83\x1f\xb9\x6f\xa2\xd0\x00\x25\x28\x13\xa8\x10\x0d\x2f\x5c\x4c\xb8\xbd\x51\x4c\x12\x4a\x29\x46\xa0\x43\xaa\x92\x18\xc6\x66\x90\x23\x31\xc6\x20\x8d\x6d\xb4\x88\xd2\x38\x91\x99\x6c\xf7\x70\x42\x5b\x57\x9d\x3f\xac\xd4\xee\x52\x17\x44\x6c\x27\x80\x90\x80\xd3\x04\xd2\x89\xbb\xdd\x7f\x73\xf0\x8a\x59\xc2\xe4\x74\x43\x26\xfa\x84\xad\x5a\xf0\xff\x5c\x1c\x2b\x9a\x11\x0e\x7c\xa2\x1e\x23\xe4\x69\x45\x04\x83\x6c\x55\x10\xfa\xc4\x7f\x31\x2a\x31\x13\x71\xea\xce\xad\x60\x0e\x28\x80\x6c\x37\xc5\x66\xc6\x3f\x89\x3e\xb1\xb3\x56\xf2\x9e\xae\xb3\xf1\xec\xf0\x19\x50\xae\x34\x61\x0c\x4d\xc8\xc2\x35\xfc\xcd\xea\x7c\x3f\xa6\x4c\x53\x0e\xe5\x14\x47\x79\xd9\x0c\xa6\x4d\x20\xdb\x72\xb6\xfd\x89\xb3\x2d\x27\xb6\xcf\xc4\x45\x2d\xcb\x14\x2c\xb7\x9d\xec\xad\x25\xbb\x10\xe3\xae\x4d\x03\x1b\xf2\x57\x20\xa0\x2a\x79\xac\x95\x0f\x79\x16\x96\xfb\x67\xf6\xb5\x09\x3b\xe9\x82\x45\x06\x09\x36\xe8\x34\xbb\xb7\xf6\x2e\x39\x44\xc6\x00\xf9\xf8\x3b\xa8\x7c\xd2\x73\xb2\x99\xcb\xe7\xee\xcd\xd1\xf9\xfe\x6c\x3e\x08\x0d\x84\x31\x48\x78\xb0\x96\x3f\x12\x4a\xd1\x3e\x43\x98\xe1\xf6\x93\xed\xf0\x1b\xdd\x3e\xcd\xf1\x79\xe7\x3d\x1e\x9d\x9f\x9f\x5e\x1c\xd5\x8b\x11\xea\x62\xcc\x5e\xf5\xd4\xf3\xb7\x3a\xad\xce\xf9\x69\xad\xb4\x54\x32\x4f\x8e\x18\x20\xf7\x45\x62\x03\x4b\x27\x9b\x6e\xfd\xd2\xd6\xa9\x2d\x55\xf9\xe3\xb3\x4a\xf2\xbf\xbf\x0c\xcb\x4f\x95\x0f\x95\xab\x32\x7c\x32\x8e\xb7\x8f\xae\xa4\x72\x34\xbf\x81\x5d\x3e\xa8\x8b\x26\xae\xcd\xb4\x1d\xd7\x2a\xf6\xef\xbb\x11\x96\xe9\x25\xdb\x62\xc6\xce\x6b\x15\xfb\x7f\xb1\xa6\xa9\xe1\x60\xc4\x6d\xbf\xdb\xbc\x62\xc2\x7f\xd9\x9f\x2a\x5f\xc4\x52\xa1\x04\x4f\xcf\x18\x6e\x55\x7e\x87\xac\xa0\xdf\xcf\x3c\x40\xc9\xa8\xbb\xa3\xc8\x1f\xff\xfb\x04\x9a\x57\xed\x2b\x46\xf9\x0b\xe5\x43\xe8\xa7\x0b\x1e\xaf\x1e\x8f\xb3\x2b\x9f\xac\x9e\x93\x0e\xaf\xbf\xfc\x5c\xd1\x0f\x78\x48\x53\x3a\x47\x07\xca\xe0\x83\xff\xbc\x85\xb7\x74\xb0\xf0\x1a\x09\xf4\x5f\xac\xef\x45\xb2\x43\x71\x69\x7f\xdb\x3a\xef\x77\xfc\xeb\xb9\xc7\x5c\xe7\xe6\x3e\xe9\xe3\x2e\x9c\x7d\xfe\xe5\xd7\xcf\xf3\xdb\x59\xd7\x82\x61\x4b\x3a\xb6\xda\xf1\x16\xa7\x97\xb6\xd4\x6f\x41\x24\x8a\xde\x55\xdc\x80\xd0\x21\xca\x09\x55\x08\x6f\xcb\xad\x32\x04\x92\x8e\xe7\x37\x37\xb6\x81\x9a\x28\x88\x55\x4c\xd8\xbb\x75\x51\xcd\xf6\x83\x6f\xe2\xf5\xd1\xfe\x8c\xd9\x4a\x1b\xe5\x30\x6e\x34\xaa\xc7\x97\x60\x57\xab\xb8\x8f\x23\x79\x56\x81\xb1\xae\xd7\x6a\xc9\xc7\xdf\xcc\x67\xa3\x61\x1f\x4f\x1c\xf4\xc2\x7c\x98\xc8\xf9\xb7\x4f\xde\xfc\x4b\xa3\x02\x0f\xa8\xcd\x12\xf6\xb7\xc9\x77\xfb\x43\x2f\xa4\x03\x7d\xc3\x3f\xe2\x4c\x55\xa0\xed\xb5\xfe\xc1\xff\xa7\x02\x5e\xeb\xb1\x02\x57\x33\xd1\x8f\x53\xcc\x8d\xd3\x33\xdf\xda\xe3\xc2\x5e\x2f\x35\xdf\x1e\xf2\xfc\xda\xee\xd3\xa4\x71\xd0\x86\x3f\x5a\x40\x72\x75\x63\x73\x43\xd2\x07\x6d\x69\x38\x9c\x6e\x67\x5a\x8a\x37\x73\xda\xf3\x74\xd0\xb3\xb3\x55\xaf\xd6\xfb\x86\xb8\xe8\xb1\x0b\xde\x73\xa7\xf3\xf8\xd4\x6d\x5f\x5f\xc2\x4f\x3f\xfd\xf4\x53\x7a\x5f\x02\xd4\x95\x60\xcb\xad\x58\x4a\xa3\xbc\x49\x36\x68\x37\xca\x48\x64\x84\x65\x78\xab\xc8\x00\x25\xf8\xa1\xa0\x3e\xbe\xab\x82\x49\x2d\xec\x29\x48\x40\x89\x00\x9d\x54\x17\x85\x18\xdb\xb0\xa4\xa0\x3f\x03\x1d\x4b\x6e\xac\x39\xe5\x01\x4e\xa1\x7e\x06\x94\x6b\x61\x3e\x2d\x1a\x05\x84\x29\xb1\x54\xe5\x7d\x53\x2c\xef\x66\xfb\xae\x37\x0b\x6e\x5d\x31\x69\x17\x61\x3d\xb9\x36\x4d\x05\x2b\x7a\xb7\xb5\x30\xce\xdd\xee\xfc\xba\x30\xd7\xf5\x7f\x6f\x09\xd4\x4e\xbe\x37\x79\xc5\xc9\x7f\x3d\x97\x51\xec\xa8\xdf\x52\x4c\xd2\x84\x07\x44\x06\xf0\x82\xb3\x89\x90\x81\xda\x9f\x5f\x0f\x35\x38\xf4\x90\xc5\xbf\x77\x41\xb9\x40\x59\x21\xf4\x7a\xe6\x74\x9a\x18\x30\xe5\x4b\x1a\x69\x28\x06\x62\x2d\xaa\x7c\x51\x8c\xbf\x3a\x28\x59\x31\xe2\xf2\xfe\xf5\xde\xc5\x59\xb9\x15\x6c\x1b\x3f\xd4\x5d\xba\x5f\x5f\x35\xe6\x2e\xe7\x6b\x8d\x55\x63\xc7\x6e\xec\x78\xd5\x98\xab\x97\xd7\x4e\x56\x8d\xb9\x44\xaa\xb6\x92\x96\x33\x37\x76\xb6\x6a\xec\xbd\x1b\x7b\xbf\x6a\xcc\xa5\x75\xb5\xf3\xf5\xea\xb3\xf2\xb5\x8b\x43\xba\x22\x83\x11\xec\x4b\x35\x36\x1b\x6c\x2a\x98\x63\x3d\xa0\xf3\xc9\xbf\x3f\xb2\x99\xbf\x5f\xb8\xe0\xf8\xeb\xb7\x04\x58\x76\x81\xcf\x20\x24\x7c\xfe\xc5\x77\x3b\x31\x32\xb8\x7f\xfd\x5c\xcc\x89\x72\x6f\xb0\x1c\x2a\xe6\x43\xe2\x87\xae\x9f\x56\x69\x22\xb5\x4a\x4a\x6d\xf5\xc6\x65\xe3\xb2\x76\x59\x86\xb4\x7d\x30\x81\x7f\x4e\xbb\x8d\x3e\x97\xe1\xad\xef\x7c\x24\x9b\x41\x3f\x1e\x0e\x67\x15\xe3\xef\x66\x30\x44\x0d\xbe\xe0\x3e\xd1\xc8\xad\xfb\x4a\x03\xaf\x42\xfc\xb7\x78\x1b\x67\xdf\x02\xdc\x6e\xc6\x88\x0d\x00\xa7\x11\x23\x94\x63\xb0\x67\xdd\x8d\x8b\x55\x09\x5f\xbd\x66\x6f\xfc\x97\xec\x4c\x23\x81\xe6\xcf\xf9\x71\x02\xcd\x9f\xf0\x93\x04\x9a\x3f\xdb\xa7\x09\x34\x7f\xaa\xcf\x12\x68\xfe\x3c\xbf\x4f\xa0\xe7\x39\xe8\x79\x02\xbd\xc8\x41\x2f\x12\x68\xbd\xb6\xc4\x46\x0a\xaf\x2f\x31\x92\xc2\xf3\x0c\x1e\xa7\x94\xd4\xd7\xd7\xa0\x33\xef\x55\x6d\xde\xdc\xeb\xf6\x4d\xf3\xf9\xbe\xbb\xff\xfe\x6e\xdf\xd1\x07\xef\xae\xb8\xa3\x29\xde\xc2\xa6\x36\x9f\x9a\x57\x77\x2d\x0b\x7f\x7f\x5e\xce\x0d\x7d\x78\x6a\xb7\x3f\xda\x91\xb3\x7a\x7e\xa4\xfb\xfc\xf4\xf1\xce\xbb\x75\x63\x8d\xfc\xd8\x6f\x77\xed\xee\x43\xf3\x53\xdb\x73\x0d\x91\x67\xc7\xf9\xe1\x76\xd3\xeb\xb6\x9f\x9f\x1e\x3b\x6d\x77\x69\xb5\x84\xf3\xe9\xd9\xf3\xee\x9a\x0f\x76\xac\x76\x92\x1f\xbb\x6a\xde\x77\x13\x52\xcf\xcf\x36\x6e\x45\xf6\x7d\xb6\x43\xda\xf0\x03\x5a\xea\xdc\xeb\x77\xff\x4f\x79\xc8\xbf\x2d\xb8\xad\x91\xcf\x76\x7a\x1c\x8e\x8d\x45\x2b\xc9\xd2\xc9\x40\x4d\xfc\xd0\x35\xa0\xe4\x39\xfc\x44\xa6\x74\x44\xff\xc4\x00\x82\xcc\x9c\xa5\x9b\xdc\x98\x31\xe5\x4b\x74\xaf\xb2\xaf\x37\x10\xe9\x2b\x92\x87\x72\x6c\x0f\xc2\x36\x93\x50\x93\x4d\xd9\x17\x2c\xd3\x7e\x4d\xdf\x21\xae\xc2\xef\x92\x6a\x04\x02\xe5\x9f\xcb\x40\x14\x94\x7b\xbd\xeb\xbb\xf6\xbf\xb7\x7b\xbd\x42\x01\x28\xff\xfa\xe6\x66\x8a\xb3\x4a\xf1\xb5\x2f\x5c\xba\x57\xbc\x7c\x3a\xb2\xfd\x32\x2c\xc6\xb4\x2e\xfb\xf4\xe1\x2a\x49\x41\xdf\x96\x4f\x8f\xcf\xce\xdf\xd7\x2e\xea\x49\x3f\x96\xce\xbc\x16\x96\x4c\x99\x84\x54\x53\x15\xbe\x5b\xf4\x69\xf5\x19\xf1\x5f\x2a\x50\x6e\x9c\x9e\x3a\x40\x14\x4b\x04\x89\x41\x05\xca\x67\xa7\x8d\xf3\x5a\x06\x3a\x34\x7b\x57\x81\x72\xfd\xec\x7d\xbd\x7e\x96\x1b\xea\xb3\x18\xe7\x5e\xdc\x7c\xbc\xfe\xf8\xc3\xeb\x8f\x3f\xfc\x6f\x00\x00\x00\xff\xff\x0b\x49\xf4\xc7\xef\x40\x00\x00")

func dataConfigJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataConfigJson,
		"data/config.json",
	)
}

func dataConfigJson() (*asset, error) {
	bytes, err := dataConfigJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/config.json", size: 16623, mode: os.FileMode(438), modTime: time.Unix(1721073415, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/config.json": dataConfigJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"config.json": &bintree{dataConfigJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
