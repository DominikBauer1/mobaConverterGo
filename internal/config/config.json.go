// Code generated for package config by go-bindata DO NOT EDIT. (@generated)
// sources:
// data/config.json
package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataConfigJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3c\xfb\x6f\x22\x39\x93\xbf\xaf\xb4\xff\x43\x2d\xab\x11\x19\x7d\x84\x03\xf2\x98\x24\xdf\xde\x9e\x08\x21\x93\x68\x32\x09\x97\x26\xbb\x7b\xf7\xe9\x8e\x31\xdd\x05\xed\x8b\xb1\x39\xdb\xcd\x63\x47\xb9\xbf\xfd\x64\xbb\x1b\xba\x69\x5e\x61\xc4\x28\xd2\xb7\xd2\x8e\x02\x55\xc6\x55\xae\x2a\xd7\xc3\x2e\xef\xd7\x1f\x7f\x00\x28\x74\x06\xa8\x49\xe1\x02\xec\x37\x80\xc2\x08\xa5\xa2\x82\x17\x2e\xa0\x50\x2d\x57\xca\x95\x42\x29\x46\xf8\x21\xe1\x7d\x0c\x3a\xe3\x10\x2d\xb6\x56\xa9\x1d\x1f\x56\x4e\x0f\x6b\x27\x05\x33\xe2\xc5\x8e\x2b\x28\x54\xe6\xe7\xed\xe9\x10\x55\x6a\x56\xa5\xc2\xf9\x37\x80\x82\x1e\x0c\x99\xa7\x25\xe5\x7d\x33\xd5\xd7\xaf\x65\xcf\xfd\xee\x9e\x0c\xf0\xe5\xe5\x5f\xbf\x7e\x85\xf2\x9d\xe8\x8b\x48\xc3\xcb\xcb\xcf\xe6\xdb\xad\x2f\xf8\x7d\x34\xe8\xa2\x4c\x20\xde\x9c\x12\xbc\xbc\xbc\x33\xa0\x47\x1c\x08\x8d\x37\x42\xe9\x04\xd2\x12\x72\xf6\xf9\x49\xa1\xe4\x64\x60\x47\x5b\xc0\x1f\xd5\xea\xb5\x90\x63\x22\x03\xca\xfb\xc9\xa8\x86\x18\x0c\xa5\x9b\x3a\x01\x35\x27\xe8\x47\x1a\x1b\x62\x30\x20\x3c\x48\xa0\x9e\x77\xf3\xf1\x77\x43\xeb\x8e\xce\xe9\x59\xa0\x21\x9a\x03\x1a\xea\x69\xe0\x95\xb8\x17\xba\x39\xa1\xba\xde\xd3\x28\xef\x44\x9f\xf2\x05\x02\x57\x82\x6b\x6f\x88\x3e\xed\x4d\xd3\xac\xcf\x17\xda\xe4\x23\x2a\x05\x1f\x20\x9f\xaf\x57\xd2\x11\xd1\xf8\x09\xa7\x2d\xa2\xc3\x2c\x57\x33\xd4\x02\x6f\x97\x52\x8c\x15\xca\xb4\x20\xaf\x05\x63\x62\xec\x79\x37\xc9\x2c\x95\x78\x76\x31\x99\xa6\xc7\x59\x40\x46\xde\x06\x90\x16\xba\x05\xd8\xd5\x25\x90\x7a\x40\x86\xfa\x4e\xf8\x84\xa1\x9a\xd1\xa3\x0c\x63\x36\xbc\x46\xeb\x61\x84\xd2\xbb\x6e\xb7\x96\x60\x5b\x52\x68\xe1\x0b\x96\xa0\xec\x3c\x96\x46\x5e\x3b\xc9\xd8\xdf\x9c\x45\x27\x98\x4f\x38\x6d\x4e\x9c\x31\xd7\x59\x5f\xcc\x78\x30\xcb\xf8\x84\x76\x79\x33\x58\x83\x0e\x43\x94\xb3\xaf\x57\x54\xf9\x82\x73\xf4\xf5\x6d\xaf\x1e\xe9\xd0\x8b\x7c\x1f\x31\x50\x6d\x49\x47\x94\x30\x36\x9d\xaf\x1a\x7b\x28\xe3\x19\x0d\x15\x49\x75\x38\x98\xcd\x53\xd7\x1a\x07\x43\x6d\xa6\x78\x52\x94\xf7\x3d\xef\xa6\xde\x4f\x69\xb1\x6e\xa4\x6f\x21\x19\xfb\xb4\x66\xdf\x46\x39\xa0\x9c\xb0\x6b\x31\x1f\x6f\x3e\x7b\xf4\xcf\x99\x5a\xd2\x63\x2e\x05\x0b\x66\x16\x5f\x1f\x0e\x91\x07\xbf\x53\x1e\x88\xb1\x4a\x5b\x48\xf2\x8b\x46\x48\xa4\xc2\xd4\xc4\x12\xfb\x52\x44\x73\xb9\x5e\x12\xff\x39\x0b\x69\x44\x52\x09\xd9\x10\x4c\xc8\x2c\x28\x6d\x28\xe6\x67\x6a\x48\x7c\xf4\x90\x07\xaa\xa1\x25\xbb\x99\xab\xb0\xff\x10\xe9\x61\xa4\x53\x80\x6b\xc1\x02\x94\xcb\x18\x4c\x4f\x7a\x27\xfc\xe7\x19\x9c\x6a\x36\xdf\xd9\x96\x1b\xcf\x0f\x71\x90\x93\xc9\xa3\x18\xab\xdc\xaa\x05\x8b\x06\x5c\xa5\x56\xed\xe3\x35\x9d\x60\x60\x06\x37\x04\x9b\x61\xbc\x29\xd7\x64\x72\x43\xfb\x21\xa3\xfd\x50\xa7\xdc\x86\x17\x8a\xb1\x11\xb5\x11\x79\x5d\x5d\x4a\x83\xc6\x94\x40\x94\x16\x83\xcf\xc4\x97\x22\xbd\x80\x34\x18\x27\xf3\x3d\x43\x94\xc6\x2b\x64\x64\x9a\x56\x70\x4e\x35\x5c\xd7\xb9\xa6\x84\x51\xa2\x52\x8c\x18\xf8\x1d\xed\x13\x1d\x49\x6b\xc7\xce\x57\x6a\x22\x75\xec\x30\x6f\x79\x02\x35\x5b\x06\xb9\x9e\x8d\x72\xec\xb4\x49\x37\x51\x66\xe2\xfb\x01\x0a\xc4\x98\x24\x06\x1d\x31\xd4\x54\x70\xe3\xda\xff\xf1\x5f\x0e\xf9\x92\xf2\xfe\x73\x6c\xe2\xf8\x9d\x17\xcf\xf8\xfe\x00\x7b\x24\x62\xba\x33\x22\x2c\x42\xe3\xfe\xb5\x8c\x30\x45\x4a\xa1\xaf\xe3\x08\x74\x29\xc4\xf3\x80\xc8\x67\x50\xa8\x8d\xb4\x55\x6a\x58\x88\x6c\x68\xc6\x5c\xa1\xb6\x6a\x44\x05\xe3\x10\x75\x88\x12\xb4\x80\x80\xaa\xa1\x11\x20\x01\x89\xf1\x9e\x35\x3e\x60\x80\x4a\x91\x3e\x9a\x91\x1c\x98\xe8\xf7\x8d\xe4\x44\xa4\xcb\xa9\x89\x73\x8b\xb0\xd0\x1e\x61\xca\x72\xfb\x77\x30\x3f\x34\x8b\x2a\xa5\xd0\x76\x0d\x17\x50\x80\x42\x02\x7c\x89\xc5\x93\xc4\xcf\x79\x04\x5b\x2f\x8d\x6a\xe5\x7c\xb9\x30\x3e\x22\x47\x49\xd8\x12\x11\xb4\x43\x04\xea\x0b\x0e\xdc\x45\x48\xd1\x03\x1d\x22\xc4\xb1\xb8\x0c\x06\x1f\xd3\x81\x9e\x90\xe0\x79\x37\x40\x15\x54\x2b\xe7\xe5\xc2\x02\x97\xa9\xa8\xba\x9e\xcd\xca\x6b\x99\xbc\xe5\x01\xf5\x89\x46\x95\xe6\x0d\xf4\x74\x88\x65\xb8\x8e\x99\x9a\x6b\x4a\x95\x80\xea\xa2\x02\xc2\xc6\x64\xaa\xa0\x58\x29\x6e\x56\x91\xe7\xdd\x38\xce\x56\xa9\x60\x9e\x1f\xac\x5f\x5b\x8a\x92\xc4\xff\x8d\xa8\xc4\xa0\x70\x01\x46\xc5\xcb\xad\x94\x28\xea\x5b\xfe\xd7\x98\xa9\xd1\x41\x28\x94\xb6\x61\x5c\x48\xb8\x6d\x01\x09\x02\x93\x69\x24\xea\x92\x96\xbb\x78\x1e\x39\x42\x69\x14\x47\x15\xf4\x28\xb2\x00\x7c\xc2\xb9\xd0\xd0\x45\x30\xa1\x63\x9a\x53\x9c\x09\xba\xeb\x57\x55\xab\xad\xd8\x64\xdb\xb2\x3f\x34\x71\x3d\x36\x31\x63\x46\x86\xe9\xac\xd6\xb2\xa6\x66\x70\xf6\x37\x54\x41\xad\x96\xe3\x38\x49\x6a\xb6\xd6\xc5\x2e\x3c\x47\x49\xe6\xb4\x82\xe1\x45\xa6\x32\x39\xe1\x7a\xce\x9a\x9c\x74\xd9\x0a\xc7\x55\x0f\x46\x84\xfb\x18\x6c\x62\xd1\xcd\x01\x7f\x54\xab\x86\xc1\x98\xec\x66\x4b\x8f\x49\x5f\x40\xe1\xb0\x9a\x71\x43\x57\x54\x25\x98\xca\x52\xff\xb4\x30\x7e\xe6\xd5\x56\x6f\x9a\x54\x42\xfc\xdd\xe4\xe1\xcf\x69\xbe\x2d\x61\x64\x4b\x81\x5d\x2c\x77\x5b\x49\x24\xf9\xac\x16\x80\x8e\x28\x44\x43\x61\x83\x16\xe5\x65\x28\xfe\xbd\x08\x94\x5b\x8b\xd6\x26\x75\x70\x4e\x82\x2a\x90\x38\x64\xc4\xcc\x3f\xa6\x3a\x84\x62\xa7\xd3\x6a\xff\x76\xfb\xf8\xb1\xd3\x99\x8d\x8f\x89\xe6\x5d\x7f\xba\xa0\xd9\x65\x69\xf7\xa8\xc7\x62\x7d\xb0\xb6\xa5\x87\xe8\xd9\xc5\xf7\x89\xc6\x31\x99\x5a\xaf\xa8\xca\xf0\x39\x62\x9a\x0e\xd9\xdc\x4b\x2a\x20\xd2\x70\x3b\x24\x92\x68\x0c\xa0\x3b\xb5\xcb\xb9\x6d\x35\x3b\x9d\xe2\x72\xee\x93\xca\xeb\x3b\x72\x6f\x1c\x5c\x9a\x7b\xfb\xfd\xf5\x9c\x27\xe5\xe1\x77\xe4\x3c\x71\x8d\x69\xee\x67\xb0\x57\xad\x60\x75\x2d\xbb\x7e\x39\x6e\xc3\x7d\xd3\x36\x59\x9e\xfd\xe1\x84\x6a\x20\x86\x19\x6b\xf1\x76\xcf\x18\xa7\x62\x77\x94\xa9\x40\xde\x96\x57\x59\x52\xe9\xef\x2d\xf9\x4a\x49\x49\x39\x92\x40\x66\x6a\x2f\x43\xf1\xb0\x5a\xb4\x12\xb4\xcb\x2f\x99\xc4\x0b\x68\x0f\x48\x3c\x98\xfa\xf3\x88\x4a\x95\xf9\x1c\xbc\x2d\x51\xe6\x4e\x46\x76\x12\xe4\xb6\xd6\xe7\x94\x46\xe3\x9c\x36\x4e\xe0\x70\x4e\xbc\x0c\x07\xf7\x42\xc3\x14\x8d\x83\xe6\x54\x85\x18\xbc\xdf\x28\xae\x5b\xae\x51\x12\x5f\xd3\x11\x82\x17\x22\x63\x79\xf9\xdc\xfd\x71\xd5\xb4\xb5\xc2\x4a\x39\x64\x0f\x82\xf6\x19\xa8\x6c\x95\xae\x85\x95\xc0\xd0\x51\x85\x67\x9c\x42\x8f\x32\x5c\xe1\xa5\x33\x27\x51\x7b\xf6\x78\x29\x96\xd4\xac\xf8\x89\x5d\x60\xda\xf3\x59\xfc\x2b\xdd\x76\xea\xe4\x6c\xd7\x0a\xf7\x95\x89\x91\x19\x75\x4d\x19\x1e\x76\x1d\xe9\xb7\xb5\xf9\x32\xc7\x86\x7b\x77\xfd\x8e\x9a\xab\x32\x8c\x0d\xc6\xe9\x8d\xb1\x3b\x78\x93\xe2\x99\x1d\x9f\xae\x17\xcd\xbd\xe0\x2b\x24\xb3\x85\xd9\xdb\xe3\x25\x6b\xf6\x62\x32\xdd\xbc\x7c\x4b\x2b\xb7\x44\x4f\xf8\xcf\xea\xd8\x39\x98\x1c\xfc\xc4\xd6\x92\x19\xf8\x8d\xd6\x96\xf8\x51\x06\xda\x46\xc6\xd1\x6c\xef\xc2\x71\xd6\x79\x09\x9f\x58\x9f\x76\xb2\x5e\x52\xaf\xaa\xd3\x5f\x27\xa5\x9b\xb5\x85\xb8\x95\x5d\x52\x83\xe7\xea\xec\xe4\x84\x7b\xd3\x29\xce\xd9\x8a\xd8\xb2\x05\x7b\xad\x54\xa1\xbd\x35\x4f\x36\xed\xda\x97\x33\xb5\x09\x54\xae\x96\x5e\xcb\x54\xfa\x9c\x7f\x67\x5f\xd0\x9c\x0c\x51\xea\x8d\x61\x18\x79\x00\xcc\x90\x02\x46\x78\x3f\x22\xfd\x59\x95\xa3\x92\xd0\x94\x70\xf9\x96\x1c\xc2\xf2\x6b\x8f\xbd\x66\x2c\x4f\x0a\xc1\x6b\xb4\x40\x8c\x50\x82\xbd\x64\x31\xca\x9c\xfb\x4c\x53\x18\xba\x24\xd0\xc6\xca\x46\xcb\xa5\x80\x49\xe0\x14\x12\x8c\xcb\x28\x03\xfc\xdc\x7e\xb8\x7a\xb8\x80\x46\xfd\xae\xb1\xf9\x60\xae\xd1\x5a\x22\x20\xcf\xbb\xf9\x97\xb9\xff\xd9\x42\x46\xc9\x85\xce\x7a\x01\xc5\x7a\x0a\xbe\x31\xab\x49\x2e\x9a\xf2\xe2\xd9\xfe\xa8\xb8\xb2\xcc\x80\x82\x25\xfe\xd6\x69\x7d\xd1\xdb\x36\x5a\xe0\x0d\xd1\xfd\xa0\x96\x43\xdd\x0b\x39\x70\x7e\xf4\x68\xa5\xf0\x72\xd7\x63\x7b\xf2\x0f\xc9\x61\x85\x11\x96\xdb\x87\x2e\xfe\xc0\x23\xfa\xa2\xcf\xe9\x9f\xa8\x80\x9a\xb4\x96\x13\x06\x23\x22\xa9\x11\x84\x82\x77\xa6\xd4\x2f\xc1\x3b\x53\x33\x97\xe0\x9d\xf1\x2f\xe6\x1b\x51\xaa\x0c\xc5\x77\x45\x50\xa1\x88\x58\x00\x5d\x5c\x72\xaa\xd1\x7c\x6c\x34\xef\xdb\x26\x31\x03\x63\xd3\xef\xde\xc1\x41\x0a\x9a\xfa\xf8\xde\x78\x80\xc8\x0c\x59\x96\xc2\x2d\x5c\x12\xae\x97\x4f\x3d\xd2\xe2\x9b\xfc\x94\x49\x55\x12\xc3\x8a\x2f\xda\x37\x9b\x93\xa5\x9a\xb7\x19\xef\x66\x54\x5b\x62\x34\xde\xcd\xa8\xea\x0c\x66\x95\x51\x2c\x5e\x80\xee\x62\x13\xdb\xad\xf7\x13\x4e\x01\x63\x52\x40\x66\xd7\xa0\x65\xb8\x72\x54\x2e\x00\xfd\x20\x2c\x05\xe1\x61\x1f\x27\x87\x2a\x24\x55\xfb\x59\x8a\x68\x58\x3d\x76\xdf\xa5\x22\xa5\xdf\xeb\x8f\xf7\x73\x84\x85\xe7\x54\x99\xbe\xbd\xdd\xdf\x82\xec\x55\xb7\x29\x6e\xb4\xa1\x93\x5e\x47\x70\x7c\x7c\x56\xc2\xa0\x76\x72\x52\x3d\x2f\xa1\x1f\x28\x92\x62\x5d\x91\x1c\xbf\xf1\xcd\xf2\xfe\x58\x8d\x09\xa4\x78\x24\xa8\x4a\x7e\x48\xfc\x90\xd4\x2a\xa5\xa3\x00\x55\xcc\x1d\xaa\x52\x97\x89\x71\x8f\xaa\xb0\x44\xa4\xdf\x13\x51\x3e\x98\x6f\xbc\xf9\xde\x73\x84\x9f\xd3\xb7\xa7\x11\x91\x0e\x91\x6b\xea\x13\x7b\xa9\xa7\x62\x66\xac\x73\x10\x91\x06\xe3\x41\xc6\x42\x06\x26\x5c\x69\xf1\x8c\x6f\xec\x10\x79\x45\x77\xc0\xae\x25\xe4\x76\x12\xac\x07\xff\x13\x29\x1d\xa7\x6d\x86\x3e\x72\xdf\xe4\xbf\x01\x4a\x50\x26\x45\x22\x1a\x9e\xb9\x18\x73\x7b\xfe\x1a\x97\xcb\x52\x0c\x40\x87\x54\xc5\xd9\x93\xad\x8f\x07\x62\x84\x41\x92\x55\x69\x31\x4c\x32\x54\x66\x6a\xf9\xb7\x24\xe6\x55\x5d\x16\xfb\x95\xf3\x6d\x12\xe6\x88\xed\xe8\x10\x12\x70\x12\x43\x5a\x51\xbb\xfd\x1f\x0e\x5e\x32\x53\x98\x8a\xb5\xcf\x44\x97\xb0\x65\x13\xbe\x01\x01\x2e\x69\x43\xd9\xf3\x3e\x7f\x18\x22\x4f\x6e\xc2\x30\x48\xdf\x07\x43\x97\xf8\xcf\xc6\xec\xa6\x22\x4a\x92\x0c\x2b\xca\x37\x25\xb2\x74\xe7\xcd\x7a\x51\x7d\x16\x5d\x62\x47\x2d\x95\x56\x32\xcf\xda\x1d\xcd\xa7\x40\xb9\xd2\x84\x31\x34\xa9\x17\xd7\xf0\x37\xbb\x13\xbb\x11\x65\x9a\x72\x28\x26\x34\x8a\x8b\xee\x3c\x69\x18\xda\x54\xc3\xee\xce\x9c\x6d\x4f\xb2\x3d\x49\x2e\xfb\x5a\xe4\x60\xb1\x45\x69\x67\xbb\xda\x86\x19\x77\x98\x1d\xd8\xba\xa6\x04\x41\x9c\x87\x9b\xc2\xe6\x4d\x19\x4f\xae\x3b\x6b\x57\x4f\xb5\x95\xf5\x58\x62\x10\x53\x83\x56\xbd\x7d\x63\xef\x04\x42\x64\x0c\x90\x8f\xde\x94\x64\x16\xda\xd3\xd6\xcb\xe5\xa9\x7d\x7d\x78\xb6\xbb\x60\xee\x85\x06\xc2\x18\xc4\xab\xb6\x31\x6f\x28\x94\xa2\x5d\x86\x30\xc5\xcd\xfe\xc6\xd1\x37\xfb\xe7\x24\xb3\xce\x5b\xef\xe1\xf0\xec\xec\xe4\xfc\xb0\x9a\x17\xcd\x1c\x67\x8f\xd7\xaa\xd9\x93\xb4\x46\xeb\xec\xa4\x52\x58\x68\xe1\x88\xb7\x31\x20\xf7\x45\xec\x99\x0b\xc7\xeb\xce\x66\x93\x56\xbe\x0d\x5d\x22\x47\xa7\xa5\xf8\xdf\xee\x32\x2c\x3e\x96\x3e\x96\x2e\x8b\xf0\xd9\xa4\x1c\x5d\x74\x57\x6f\x87\xb3\x93\xf5\x45\x67\x30\x6f\x2a\x5c\xcf\xdb\x51\xa5\x64\xff\xfb\x6e\x8c\xa5\x7a\x1b\x37\xb8\xca\xb3\x4a\xc9\xfe\x3b\x5f\xd1\x64\xb3\x37\xe6\x36\x9f\x27\x5f\x32\xe1\x3f\xef\xce\x95\x2f\x22\xa9\x50\x82\xa7\xa7\x99\xee\x8e\xe5\xc6\xef\x88\xe5\xec\xfb\x89\x07\x28\x19\x75\x87\x3d\xd9\xed\x7f\x17\x43\xb3\xa6\x7d\xc9\x28\x7f\xa6\xbc\x0f\xdd\x64\xc2\xa3\xe5\xf8\x28\x3d\xf3\xf1\xf2\x31\x09\x7a\xf5\x81\xf3\x92\xfe\xd4\x7d\x3a\xdf\x19\x39\x50\x86\x1e\xfc\xf7\x0d\x1c\xd0\xde\x3c\x32\xc5\xd0\x7f\xb3\xf1\x1d\xc9\x16\x97\x86\xdf\xd3\x1b\xcf\x3a\x76\xff\x0a\xda\x56\x18\xf3\x6e\xe5\x5d\xca\xf9\x6d\x64\xf1\xe5\x97\x5f\xbf\xcc\x4e\xdd\x5d\x3b\x90\xbd\x0e\xb4\xf7\x5e\x07\x38\xb9\xb0\x6d\x27\x16\x44\x86\xc3\xf7\x25\x87\x10\x3a\x44\x39\xa6\x0a\xe1\xa0\xd8\x28\x42\x20\xe9\x68\x76\x92\x66\x1f\x0d\x10\x05\x91\x8a\x08\x7b\xbf\x2a\x3b\xdb\xec\x5c\x4c\x6d\x33\xd8\x7d\x61\xf6\x96\x96\x72\x18\xd5\x6a\xe5\xa3\x0b\xb0\xb3\x95\xdc\x9f\x43\x79\x5a\x82\x91\xae\x56\x2a\xf1\x9f\xbf\x99\xbf\xb5\x9a\xfd\x7a\xec\xa0\xe7\xe6\x8f\xa9\x19\x7e\xfb\xec\xcd\x3e\xd4\x4a\x70\x8f\xda\x4c\x61\x7f\x1b\x7f\xb6\x3f\xf4\x42\xda\xd3\xd7\xfc\x13\x4e\x55\x09\x9a\x5e\xe3\x1f\xfc\xff\x4a\xe0\x35\x1e\x4a\x70\x39\x15\xdd\x28\xa1\x5c\x3b\x39\xf5\xad\xcf\xcf\xe9\x7a\xa1\xe1\x7c\x9f\x3e\xc2\x76\x5c\xc7\xcd\xb2\x36\x29\xd3\x02\xe2\xa3\x34\x5b\x79\x93\x2e\x68\xcb\xc3\x5b\xda\x0d\xa9\xc6\xfb\xf5\xb2\xe9\x78\x3a\xe8\xd8\xd1\xaa\x53\xe9\x7c\x43\xb6\xf6\xd0\x06\xef\xa9\xd5\x7a\x78\x6c\x37\xaf\x2e\xe0\xa7\x9f\x7e\xfa\x29\x39\xf1\x02\xea\x2e\xfc\x8b\x8d\x48\x4a\x63\xee\x71\xad\x6d\x55\x6b\x64\x38\xc0\x22\x1c\x28\xd2\x43\x09\x7e\x28\xa8\x8f\xef\xcb\x60\x8a\x2a\xbb\x6f\x62\x50\x2c\x72\xa7\x87\xf9\x95\x9c\x6d\xb7\x53\xd0\x9d\x82\x8e\x24\x37\x31\x86\xf2\x00\x27\x50\x3d\x05\xca\xb5\x30\x7f\x2d\x19\x05\x84\x29\xb1\xd0\x53\xf0\x2e\xdf\x4c\x90\x7e\x9d\xb0\x5e\x70\xab\xae\x15\xb7\x11\xd6\xa3\x6b\x66\x56\xb0\xe4\x85\x83\x16\x26\xe5\xb0\x9a\x5f\x95\x7c\xbb\x57\x12\x1b\xd2\xc7\xe3\xef\xcd\x5e\x7e\xf0\x5f\x61\x09\x0a\xf9\x97\x2a\xeb\xa5\xe2\x69\xc2\x03\x22\x03\x78\xc6\xe9\x58\xc8\x40\xed\x2e\x21\x0f\x35\x38\xf2\x90\xa6\xbf\x73\x33\x42\x8e\xb3\x5c\x0a\xf9\xc4\xe9\x24\x76\x92\xca\x97\x74\xa8\x21\x9f\x50\x36\xa8\xf2\x45\x3e\x8f\x6c\xa1\x64\xf9\xcc\xd1\xfb\xf7\x3b\x97\x2f\x66\x66\xb0\xcf\x63\xa0\xea\x8e\x46\xaa\xcb\x70\xee\x42\xa6\x52\x5b\x86\x3b\x72\xb8\xa3\x65\x38\xd7\x6b\x51\x39\x5e\x86\x73\x05\x61\x65\x29\x2f\xa7\x0e\x77\xba\x0c\xf7\xc1\xe1\x3e\x2c\xc3\xb9\xf2\xb4\x72\xb6\xda\x7c\x96\x3e\x67\x5a\x6f\x42\x69\x23\x7d\xb5\xcd\x84\x62\x0c\xf6\xa9\x9a\xad\x69\xeb\x0a\x66\x34\xdf\xd2\xae\x5a\x78\xc7\xb5\x5e\x1e\xbf\x70\xc1\xf1\xd7\x6f\x49\xfa\xec\x04\x5f\x40\x48\xf8\xf2\x8b\xef\x34\x37\x30\xb4\x7f\xfd\x92\xaf\x05\x33\x2f\xc9\xf6\x95\x87\x22\xf1\x43\xd7\x6f\xae\x34\x91\x5a\xc5\xd7\xb1\xd5\xda\x45\xed\xa2\x72\x51\x84\xa4\xbd\x36\x86\x7f\x49\xba\xe7\xbe\x14\xe1\xc0\x77\x51\x98\x4d\xa1\x1b\xf5\xfb\xd3\x92\x89\xa8\x53\xe8\xa3\x06\x5f\x70\x9f\x68\xe4\x36\x40\x26\xc9\x60\x2e\x27\x9d\xbf\x8a\xdb\xa9\x41\x62\x3b\xcf\xc5\x7a\x80\x93\x21\x23\x94\x67\x1a\x08\x5e\x73\x31\xcb\xc5\xb2\x2a\xb7\x5a\xb1\x17\x3c\x0b\x4e\xa9\x16\x43\xb3\x4e\xe1\x28\x86\x66\xdd\xc1\x71\x0c\xcd\x3a\x82\x93\x18\x9a\x75\x01\xa7\x31\x34\xbb\xf9\x3f\xc4\xd0\xb3\x0c\xf4\x2c\x86\x9e\x67\xa0\xe7\x31\xb4\x5a\x59\x58\x46\x02\xaf\x2e\x2c\x24\x81\x67\x17\x78\x94\x70\x52\x5d\xdd\xa4\x90\x7a\xdc\xb8\xa1\xb3\xa3\x79\x5d\x7f\xba\x6b\xef\xae\xdf\xcd\x1a\xbd\xf7\x6e\xf3\x1a\x4d\xe8\xe6\x94\x5a\x7f\xac\x5f\xde\x36\x2c\xfc\xc3\x59\x31\x83\xfa\xf8\xd8\x6c\x7e\xb2\x98\xd3\x6a\x16\xd3\x7e\x7a\xfc\x74\xeb\x5e\xaa\x55\x4f\x6b\x59\xdc\x6f\xb7\xcd\xf6\x7d\xfd\x73\xd3\x73\xdd\xbd\xa7\x47\x59\x74\xb3\xee\xb5\x9b\x4f\x8f\x0f\xad\xa6\x3b\xa9\x5b\xa0\xf9\xf8\xe4\x79\xb7\xf5\x7b\x8b\xab\x1c\x67\x71\x97\xf5\xbb\x76\xcc\xea\xd9\xe9\x5a\x55\xa4\x1f\x95\xee\xb3\xbe\x79\x53\x8e\x3d\xf3\x6a\xf6\x9f\x66\xd5\xd9\x67\xc1\x9b\xba\x52\x6d\xbb\xd1\xfe\x16\x3e\xef\x67\x5a\xd8\x7d\xa8\x89\x1f\xba\x2e\xa8\xec\x0a\x3f\x93\x09\x1d\xd0\x3f\x31\x80\x20\x35\x66\xe1\x88\x3c\x62\x4c\xf9\x12\xdd\xff\xb3\x62\xb5\x13\x4a\xde\x42\xef\x2b\x72\xde\x0b\xdb\xd1\x44\x4d\x41\x68\x5f\x52\x27\xed\xca\xbe\x23\x5c\x86\xdf\x25\xd5\x08\x04\x8a\x3f\x17\x81\x28\x28\x76\x3a\x57\xb7\xcd\xff\x6c\x76\x3a\xb9\xdb\xbb\xec\x3b\xed\xdd\x92\xb2\x6d\x5e\x56\xbb\xb7\x9c\x3e\x1d\xd8\xa6\x2d\x16\x61\x72\xd5\xff\xf8\xf1\x32\xae\xa2\x0f\x8a\x27\x47\xa7\x67\x1f\x2a\xe7\xd5\xb8\x63\x50\xa7\xde\x7f\xc6\x43\xc6\x21\xd5\x54\x85\xef\xe7\x9d\x84\x5d\x46\xfc\xe7\x12\x14\x6b\x27\x27\x0e\x30\x8c\x24\x82\xc4\xa0\x04\xc5\xd3\x93\xda\x59\x25\x05\xed\x1b\xdd\x95\xa0\x58\x3d\xfd\x50\xad\x9e\x66\x50\x5d\x16\xe1\x2c\x4d\x30\x7f\x5e\x7e\xfc\xe1\xe5\xc7\x1f\xfe\x3f\x00\x00\xff\xff\x90\x2d\xc3\xdf\xd8\x44\x00\x00")

func dataConfigJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataConfigJson,
		"data/config.json",
	)
}

func dataConfigJson() (*asset, error) {
	bytes, err := dataConfigJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/config.json", size: 17624, mode: os.FileMode(438), modTime: time.Unix(1720725261, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/config.json": dataConfigJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"config.json": &bintree{dataConfigJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
